/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query FindClassifications($filter: ClassificationFilterType) {\n    classifications(filter: $filter) {\n      _id\n      incidents {\n        incident_id\n      }\n      reports {\n        report_number\n      }\n      notes\n      namespace\n      attributes {\n        short_name\n        value_json\n      }\n      publish\n    }\n  }\n": types.FindClassificationsDocument,
    "\n  mutation UpsertClassification(\n    $filter: ClassificationFilterType!\n    $update: ClassificationInsertType!\n  ) {\n    upsertOneClassification(filter: $filter, update: $update) {\n      _id\n      incidents {\n        incident_id\n      }\n      reports {\n        report_number\n      }\n      notes\n      namespace\n      attributes {\n        short_name\n        value_json\n      }\n      publish\n    }\n  }\n": types.UpsertClassificationDocument,
    "\n  mutation InsertDuplicate($duplicate: DuplicateInsertType!) {\n    insertOneDuplicate(data: $duplicate) {\n      duplicate_incident_number\n      true_incident_number\n    }\n  }\n": types.InsertDuplicateDocument,
    "\n  mutation UpsertEntity($filter: EntityFilterType!, $update: EntityInsertType!) {\n    upsertOneEntity(filter: $filter, update: $update) {\n      entity_id\n      name\n    }\n  }\n": types.UpsertEntityDocument,
    "\n  query FindEntities {\n    entities {\n      entity_id\n      name\n    }\n  }\n": types.FindEntitiesDocument,
    "\n  query FindEntity($filter: EntityFilterType) {\n    entity(filter: $filter) {\n      entity_id\n      name\n      created_at\n      date_modified\n    }\n  }\n": types.FindEntityDocument,
    "\n  mutation UpdateEntity($filter: EntityFilterType!, $update: EntityUpdateType!) {\n    updateOneEntity(filter: $filter, update: $update) {\n      entity_id\n    }\n  }\n": types.UpdateEntityDocument,
    "\n  query FindIncident($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n    }\n  }\n": types.FindIncidentDocument,
    "\n  query FindIncidentsTable($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      reports {\n        report_number\n      }\n    }\n  }\n": types.FindIncidentsTableDocument,
    "\n  query FindIncidentEntities($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n    }\n  }\n": types.FindIncidentEntitiesDocument,
    "\n  query FindIncidents($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n    }\n  }\n": types.FindIncidentsDocument,
    "\n  query FindIncidentsTitles($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n    }\n  }\n": types.FindIncidentsTitlesDocument,
    "\n  mutation UpdateIncident($filter: IncidentFilterType!, $update: IncidentUpdateType!) {\n    updateOneIncident(filter: $filter, update: $update) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n    }\n  }\n": types.UpdateIncidentDocument,
    "\n  mutation UpdateIncidents($filter: IncidentFilterType!, $update: IncidentUpdateType!) {\n    updateManyIncidents(filter: $filter, update: $update) {\n      matchedCount\n      modifiedCount\n    }\n  }\n": types.UpdateIncidentsDocument,
    "\n  mutation InsertIncident($data: IncidentInsertType!) {\n    insertOneIncident(data: $data) {\n      incident_id\n    }\n  }\n": types.InsertIncidentDocument,
    "\n  query FindLastIncident {\n    incidents(sort: { incident_id: DESC }, pagination: { limit: 1, skip: 0 }) {\n      incident_id\n    }\n  }\n": types.FindLastIncidentDocument,
    "\n  query FindIncidentFull($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        submitters\n        date_published\n        report_number\n        title\n        description\n        url\n        image_url\n        cloudinary_id\n        source_domain\n        text\n        authors\n        epoch_date_submitted\n        language\n        tags\n        inputs_outputs\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n      epoch_date_modified\n      tsne {\n        x\n        y\n      }\n    }\n  }\n": types.FindIncidentFullDocument,
    "\n  mutation logIncidentHistory($input: History_incidentInsertInput!) {\n    logIncidentHistory(input: $input) {\n      incident_id\n    }\n  }\n": types.LogIncidentHistoryDocument,
    "\n  query FindIncidentHistory($query: History_incidentQueryInput) {\n    history_incidents(query: $query, sortBy: EPOCH_DATE_MODIFIED_DESC) {\n      incident_id\n      AllegedDeployerOfAISystem\n      AllegedDeveloperOfAISystem\n      AllegedHarmedOrNearlyHarmedParties\n      _id\n      date\n      description\n      modifiedBy\n      editor_dissimilar_incidents\n      editor_notes\n      editor_similar_incidents\n      editors\n      embedding {\n        from_reports\n        vector\n      }\n      epoch_date_modified\n      flagged_dissimilar_incidents\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      reports\n      title\n      tsne {\n        x\n        y\n      }\n    }\n  }\n": types.FindIncidentHistoryDocument,
    "\n  mutation FlagIncidentSimilarity($incidentId: Int!, $dissimilarIds: [Int!]) {\n    flagIncidentSimilarity(incidentId: $incidentId, dissimilarIds: $dissimilarIds) {\n      incident_id\n      flagged_dissimilar_incidents\n      editors {\n        userId\n      }\n    }\n  }\n": types.FlagIncidentSimilarityDocument,
    "\n  query AllQuickAdd($filter: QuickaddFilterType!) {\n    quickadds(filter: $filter) {\n      _id\n      date_submitted\n      url\n      source_domain\n    }\n  }\n": types.AllQuickAddDocument,
    "\n  mutation DeleteOneQuickAdd($filter: QuickaddFilterType) {\n    deleteManyQuickadds(filter: $filter) {\n      deletedCount\n    }\n  }\n": types.DeleteOneQuickAddDocument,
    "\n  mutation InsertQuickAdd($data: QuickaddInsertType!) {\n    insertOneQuickadd(data: $data) {\n      _id\n    }\n  }\n": types.InsertQuickAddDocument,
    "\n  query FindReport($filter: ReportFilterType!) {\n    report(filter: $filter) {\n      url\n      title\n      description\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      date_submitted\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      image_url\n      cloudinary_id\n      text\n      plain_text\n      source_domain\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      is_incident_report\n      user {\n        userId\n      }\n      embedding {\n        from_text_hash\n        vector\n      }\n      quiet\n    }\n  }\n": types.FindReportDocument,
    "\n  query FindReportWithTranslations($filter: ReportFilterType!) {\n    report(filter: $filter) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      is_incident_report\n      inputs_outputs\n      quiet\n      translations_es: translations(input: \"es\") {\n        title\n        text\n      }\n      translations_en: translations(input: \"en\") {\n        title\n        text\n      }\n      translations_fr: translations(input: \"fr\") {\n        title\n        text\n      }\n      translations_ja: translations(input: \"ja\") {\n        title\n        text\n      }\n    }\n  }\n": types.FindReportWithTranslationsDocument,
    "\n  mutation UpdateReport($filter: ReportFilterType!, $update: ReportUpdateType!) {\n    updateOneReport(filter: $filter, update: $update) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      epoch_date_published\n      epoch_date_downloaded\n      epoch_date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      quiet\n    }\n  }\n": types.UpdateReportDocument,
    "\n  mutation DeleteOneReport($filter: ReportFilterType!) {\n    deleteOneReport(filter: $filter) {\n      report_number\n    }\n  }\n": types.DeleteOneReportDocument,
    "\n  mutation LinkReportsToIncidents($input: LinkReportsToIncidentsInput!) {\n    linkReportsToIncidents(input: $input) {\n      incident_id\n      reports {\n        report_number\n      }\n    }\n  }\n": types.LinkReportsToIncidentsDocument,
    "\n  mutation logReportHistory($input: History_reportInsertInput!) {\n    logReportHistory(input: $input) {\n      report_number\n    }\n  }\n": types.LogReportHistoryDocument,
    "\n  query FindReportHistory($query: History_reportQueryInput) {\n    history_reports(query: $query, sortBy: EPOCH_DATE_MODIFIED_DESC) {\n      _id\n      authors\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      editor_notes\n      embedding {\n        from_text_hash\n        vector\n      }\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      flag\n      image_url\n      inputs_outputs\n      is_incident_report\n      language\n      modifiedBy\n      plain_text\n      report_number\n      submitters\n      tags\n      text\n      title\n      url\n      source_domain\n      user\n      quiet\n    }\n  }\n": types.FindReportHistoryDocument,
    "\n  query FindReports($filter: ReportFilterType!) {\n    reports(filter: $filter) {\n      _id\n      submitters\n      date_published\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      authors\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n    }\n  }\n": types.FindReportsDocument,
    "\n  query FindReportsTable($filter: ReportFilterType!) {\n    reports(filter: $filter, sort: { report_number: DESC }) {\n      _id\n      submitters\n      date_published\n      date_downloaded\n      date_submitted\n      date_modified\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      authors\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n      editor_notes\n      is_incident_report\n    }\n  }\n": types.FindReportsTableDocument,
    "\n  mutation FlagReport($report_number: Int!, $input: Boolean!) {\n    flagReport(report_number: $report_number, input: $input) {\n      report_number\n      flag\n      date_modified\n      epoch_date_modified\n    }\n  }\n": types.FlagReportDocument,
    "\n  mutation DeleteSubmission($_id: ObjectId!) {\n    deleteOneSubmission(filter: { _id: { EQ: $_id } }) {\n      _id\n    }\n  }\n": types.DeleteSubmissionDocument,
    "\n  query FindSubmissions {\n    submissions {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      plain_text\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      status\n      user {\n        userId\n      }\n      quiet\n    }\n  }\n": types.FindSubmissionsDocument,
    "\n  query FindSubmission($filter: SubmissionFilterType!) {\n    submission(filter: $filter) {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      status\n      quiet\n    }\n  }\n": types.FindSubmissionDocument,
    "\n  mutation UpdateSubmission($filter: SubmissionFilterType!, $update: SubmissionUpdateType!) {\n    updateOneSubmission(filter: $filter, update: $update) {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n    }\n  }\n": types.UpdateSubmissionDocument,
    "\n  mutation InsertSubmission($data: SubmissionInsertType!) {\n    insertOneSubmission(data: $data) {\n      _id\n    }\n  }\n": types.InsertSubmissionDocument,
    "\n  mutation PromoteSubmission($input: PromoteSubmissionToReportInput!) {\n    promoteSubmissionToReport(input: $input) {\n      incident_ids\n      report_number\n    }\n  }\n": types.PromoteSubmissionDocument,
    "\n  mutation UpsertSubscription($filter: SubscriptionFilterType!, $update: SubscriptionInsertType!) {\n    upsertOneSubscription(filter: $filter, update: $update) {\n      _id\n    }\n  }\n": types.UpsertSubscriptionDocument,
    "\n  query FindSubscriptions($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      userId {\n        userId\n      }\n    }\n  }\n": types.FindSubscriptionsDocument,
    "\n  query FindSubscriptionsFull($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      _id\n      incident_id {\n        incident_id\n        title\n      }\n      entityId {\n        entity_id\n        name\n      }\n      type\n      userId {\n        userId\n      }\n    }\n  }\n": types.FindSubscriptionsFullDocument,
    "\n  mutation DeleteSubscriptions($filter: SubscriptionFilterType!) {\n    deleteManySubscriptions(filter: $filter) {\n      deletedCount\n    }\n  }\n": types.DeleteSubscriptionsDocument,
    "\n  query FindUserSubscriptions($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      _id\n      incident_id {\n        incident_id\n        title\n      }\n      entityId {\n        entity_id\n        name\n      }\n      userId {\n        userId\n      }\n      type\n    }\n  }\n": types.FindUserSubscriptionsDocument,
    "\n  query FindUsers {\n    users {\n      roles\n      userId\n      first_name\n      last_name\n    }\n  }\n": types.FindUsersDocument,
    "\n  query FindUser($filter: UserFilterType!) {\n    user(filter: $filter) {\n      roles\n      userId\n      first_name\n      last_name\n      adminData {\n        email\n        disabled\n        creationDate\n        lastAuthenticationDate\n      }\n    }\n  }\n": types.FindUserDocument,
    "\n  query FindUsersByRole($role: [String!]) {\n    users(filter: { roles: { IN: $role } }) {\n      roles\n      userId\n      first_name\n      last_name\n    }\n  }\n": types.FindUsersByRoleDocument,
    "\n  mutation UpdateUserRoles($roles: [String]!, $userId: String) {\n    updateOneUser(filter: { userId: { EQ: $userId } }, update: { set: { roles: $roles } }) {\n      roles\n      userId\n    }\n  }\n": types.UpdateUserRolesDocument,
    "\n  mutation UpdateUserProfile($userId: String, $first_name: String, $last_name: String) {\n    updateOneUser(\n      filter: { userId: { EQ: $userId } }\n      update: { set: { first_name: $first_name, last_name: $last_name } }\n    ) {\n      userId\n      first_name\n      last_name\n    }\n  }\n": types.UpdateUserProfileDocument,
    "\n  query FindVariants {\n    reports(filter: { OR: [{ title: { EQ: \"\" } }, { url: { EQ: \"\" } }, { source_domain: { EQ: \"\" } }] }) {\n      submitters\n      date_published\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      plain_text\n      authors\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n    }\n  }\n": types.FindVariantsDocument,
    "\n  query FindIncidentVariants($incident_id: Int!) {\n    incident(filter: { incident_id: { EQ: $incident_id } }) {\n      incident_id\n      reports {\n        report_number\n        title\n        text\n        url\n        source_domain\n        date_published\n        tags\n        inputs_outputs\n      }\n    }\n  }\n": types.FindIncidentVariantsDocument,
    "\n  query FindVariant($filter: ReportFilterType) {\n    report(filter: $filter) {\n      report_number\n      title\n      date_published\n      submitters\n      text\n      tags\n      inputs_outputs\n    }\n  }\n": types.FindVariantDocument,
    "\n  mutation CreateVariant($input: CreateVariantInput!) {\n    createVariant(input: $input) {\n      incident_id\n      report_number\n    }\n  }\n": types.CreateVariantDocument,
    "\n  mutation UpdateVariant($filter: ReportFilterType!, $update: ReportUpdateType!) {\n    updateOneReport(filter: $filter, update: $update) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      epoch_date_published\n      epoch_date_downloaded\n      epoch_date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n    }\n  }\n": types.UpdateVariantDocument,
    "\n  mutation DeleteOneVariant($filter: ReportFilterType!) {\n    deleteOneReport(filter: $filter) {\n      report_number\n    }\n  }\n": types.DeleteOneVariantDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindClassifications($filter: ClassificationFilterType) {\n    classifications(filter: $filter) {\n      _id\n      incidents {\n        incident_id\n      }\n      reports {\n        report_number\n      }\n      notes\n      namespace\n      attributes {\n        short_name\n        value_json\n      }\n      publish\n    }\n  }\n"): (typeof documents)["\n  query FindClassifications($filter: ClassificationFilterType) {\n    classifications(filter: $filter) {\n      _id\n      incidents {\n        incident_id\n      }\n      reports {\n        report_number\n      }\n      notes\n      namespace\n      attributes {\n        short_name\n        value_json\n      }\n      publish\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpsertClassification(\n    $filter: ClassificationFilterType!\n    $update: ClassificationInsertType!\n  ) {\n    upsertOneClassification(filter: $filter, update: $update) {\n      _id\n      incidents {\n        incident_id\n      }\n      reports {\n        report_number\n      }\n      notes\n      namespace\n      attributes {\n        short_name\n        value_json\n      }\n      publish\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertClassification(\n    $filter: ClassificationFilterType!\n    $update: ClassificationInsertType!\n  ) {\n    upsertOneClassification(filter: $filter, update: $update) {\n      _id\n      incidents {\n        incident_id\n      }\n      reports {\n        report_number\n      }\n      notes\n      namespace\n      attributes {\n        short_name\n        value_json\n      }\n      publish\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertDuplicate($duplicate: DuplicateInsertType!) {\n    insertOneDuplicate(data: $duplicate) {\n      duplicate_incident_number\n      true_incident_number\n    }\n  }\n"): (typeof documents)["\n  mutation InsertDuplicate($duplicate: DuplicateInsertType!) {\n    insertOneDuplicate(data: $duplicate) {\n      duplicate_incident_number\n      true_incident_number\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpsertEntity($filter: EntityFilterType!, $update: EntityInsertType!) {\n    upsertOneEntity(filter: $filter, update: $update) {\n      entity_id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertEntity($filter: EntityFilterType!, $update: EntityInsertType!) {\n    upsertOneEntity(filter: $filter, update: $update) {\n      entity_id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindEntities {\n    entities {\n      entity_id\n      name\n    }\n  }\n"): (typeof documents)["\n  query FindEntities {\n    entities {\n      entity_id\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindEntity($filter: EntityFilterType) {\n    entity(filter: $filter) {\n      entity_id\n      name\n      created_at\n      date_modified\n    }\n  }\n"): (typeof documents)["\n  query FindEntity($filter: EntityFilterType) {\n    entity(filter: $filter) {\n      entity_id\n      name\n      created_at\n      date_modified\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateEntity($filter: EntityFilterType!, $update: EntityUpdateType!) {\n    updateOneEntity(filter: $filter, update: $update) {\n      entity_id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEntity($filter: EntityFilterType!, $update: EntityUpdateType!) {\n    updateOneEntity(filter: $filter, update: $update) {\n      entity_id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncident($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n    }\n  }\n"): (typeof documents)["\n  query FindIncident($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidentsTable($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      reports {\n        report_number\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindIncidentsTable($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      reports {\n        report_number\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidentEntities($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindIncidentEntities($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidents($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindIncidents($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidentsTitles($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n    }\n  }\n"): (typeof documents)["\n  query FindIncidentsTitles($filter: IncidentFilterType) {\n    incidents(filter: $filter) {\n      incident_id\n      title\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateIncident($filter: IncidentFilterType!, $update: IncidentUpdateType!) {\n    updateOneIncident(filter: $filter, update: $update) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateIncident($filter: IncidentFilterType!, $update: IncidentUpdateType!) {\n    updateOneIncident(filter: $filter, update: $update) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        report_number\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateIncidents($filter: IncidentFilterType!, $update: IncidentUpdateType!) {\n    updateManyIncidents(filter: $filter, update: $update) {\n      matchedCount\n      modifiedCount\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateIncidents($filter: IncidentFilterType!, $update: IncidentUpdateType!) {\n    updateManyIncidents(filter: $filter, update: $update) {\n      matchedCount\n      modifiedCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertIncident($data: IncidentInsertType!) {\n    insertOneIncident(data: $data) {\n      incident_id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertIncident($data: IncidentInsertType!) {\n    insertOneIncident(data: $data) {\n      incident_id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindLastIncident {\n    incidents(sort: { incident_id: DESC }, pagination: { limit: 1, skip: 0 }) {\n      incident_id\n    }\n  }\n"): (typeof documents)["\n  query FindLastIncident {\n    incidents(sort: { incident_id: DESC }, pagination: { limit: 1, skip: 0 }) {\n      incident_id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidentFull($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        submitters\n        date_published\n        report_number\n        title\n        description\n        url\n        image_url\n        cloudinary_id\n        source_domain\n        text\n        authors\n        epoch_date_submitted\n        language\n        tags\n        inputs_outputs\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n      epoch_date_modified\n      tsne {\n        x\n        y\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindIncidentFull($filter: IncidentFilterType) {\n    incident(filter: $filter) {\n      incident_id\n      title\n      description\n      editors {\n        userId\n        first_name\n        last_name\n      }\n      date\n      AllegedDeployerOfAISystem {\n        entity_id\n        name\n      }\n      AllegedDeveloperOfAISystem {\n        entity_id\n        name\n      }\n      AllegedHarmedOrNearlyHarmedParties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      flagged_dissimilar_incidents\n      reports {\n        submitters\n        date_published\n        report_number\n        title\n        description\n        url\n        image_url\n        cloudinary_id\n        source_domain\n        text\n        authors\n        epoch_date_submitted\n        language\n        tags\n        inputs_outputs\n      }\n      embedding {\n        from_reports\n        vector\n      }\n      editor_notes\n      epoch_date_modified\n      tsne {\n        x\n        y\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation logIncidentHistory($input: History_incidentInsertInput!) {\n    logIncidentHistory(input: $input) {\n      incident_id\n    }\n  }\n"): (typeof documents)["\n  mutation logIncidentHistory($input: History_incidentInsertInput!) {\n    logIncidentHistory(input: $input) {\n      incident_id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidentHistory($query: History_incidentQueryInput) {\n    history_incidents(query: $query, sortBy: EPOCH_DATE_MODIFIED_DESC) {\n      incident_id\n      AllegedDeployerOfAISystem\n      AllegedDeveloperOfAISystem\n      AllegedHarmedOrNearlyHarmedParties\n      _id\n      date\n      description\n      modifiedBy\n      editor_dissimilar_incidents\n      editor_notes\n      editor_similar_incidents\n      editors\n      embedding {\n        from_reports\n        vector\n      }\n      epoch_date_modified\n      flagged_dissimilar_incidents\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      reports\n      title\n      tsne {\n        x\n        y\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindIncidentHistory($query: History_incidentQueryInput) {\n    history_incidents(query: $query, sortBy: EPOCH_DATE_MODIFIED_DESC) {\n      incident_id\n      AllegedDeployerOfAISystem\n      AllegedDeveloperOfAISystem\n      AllegedHarmedOrNearlyHarmedParties\n      _id\n      date\n      description\n      modifiedBy\n      editor_dissimilar_incidents\n      editor_notes\n      editor_similar_incidents\n      editors\n      embedding {\n        from_reports\n        vector\n      }\n      epoch_date_modified\n      flagged_dissimilar_incidents\n      nlp_similar_incidents {\n        incident_id\n        similarity\n      }\n      reports\n      title\n      tsne {\n        x\n        y\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation FlagIncidentSimilarity($incidentId: Int!, $dissimilarIds: [Int!]) {\n    flagIncidentSimilarity(incidentId: $incidentId, dissimilarIds: $dissimilarIds) {\n      incident_id\n      flagged_dissimilar_incidents\n      editors {\n        userId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FlagIncidentSimilarity($incidentId: Int!, $dissimilarIds: [Int!]) {\n    flagIncidentSimilarity(incidentId: $incidentId, dissimilarIds: $dissimilarIds) {\n      incident_id\n      flagged_dissimilar_incidents\n      editors {\n        userId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllQuickAdd($filter: QuickaddFilterType!) {\n    quickadds(filter: $filter) {\n      _id\n      date_submitted\n      url\n      source_domain\n    }\n  }\n"): (typeof documents)["\n  query AllQuickAdd($filter: QuickaddFilterType!) {\n    quickadds(filter: $filter) {\n      _id\n      date_submitted\n      url\n      source_domain\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteOneQuickAdd($filter: QuickaddFilterType) {\n    deleteManyQuickadds(filter: $filter) {\n      deletedCount\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteOneQuickAdd($filter: QuickaddFilterType) {\n    deleteManyQuickadds(filter: $filter) {\n      deletedCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertQuickAdd($data: QuickaddInsertType!) {\n    insertOneQuickadd(data: $data) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertQuickAdd($data: QuickaddInsertType!) {\n    insertOneQuickadd(data: $data) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindReport($filter: ReportFilterType!) {\n    report(filter: $filter) {\n      url\n      title\n      description\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      date_submitted\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      image_url\n      cloudinary_id\n      text\n      plain_text\n      source_domain\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      is_incident_report\n      user {\n        userId\n      }\n      embedding {\n        from_text_hash\n        vector\n      }\n      quiet\n    }\n  }\n"): (typeof documents)["\n  query FindReport($filter: ReportFilterType!) {\n    report(filter: $filter) {\n      url\n      title\n      description\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      date_submitted\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      image_url\n      cloudinary_id\n      text\n      plain_text\n      source_domain\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      is_incident_report\n      user {\n        userId\n      }\n      embedding {\n        from_text_hash\n        vector\n      }\n      quiet\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindReportWithTranslations($filter: ReportFilterType!) {\n    report(filter: $filter) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      is_incident_report\n      inputs_outputs\n      quiet\n      translations_es: translations(input: \"es\") {\n        title\n        text\n      }\n      translations_en: translations(input: \"en\") {\n        title\n        text\n      }\n      translations_fr: translations(input: \"fr\") {\n        title\n        text\n      }\n      translations_ja: translations(input: \"ja\") {\n        title\n        text\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindReportWithTranslations($filter: ReportFilterType!) {\n    report(filter: $filter) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      is_incident_report\n      inputs_outputs\n      quiet\n      translations_es: translations(input: \"es\") {\n        title\n        text\n      }\n      translations_en: translations(input: \"en\") {\n        title\n        text\n      }\n      translations_fr: translations(input: \"fr\") {\n        title\n        text\n      }\n      translations_ja: translations(input: \"ja\") {\n        title\n        text\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateReport($filter: ReportFilterType!, $update: ReportUpdateType!) {\n    updateOneReport(filter: $filter, update: $update) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      epoch_date_published\n      epoch_date_downloaded\n      epoch_date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      quiet\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateReport($filter: ReportFilterType!, $update: ReportUpdateType!) {\n    updateOneReport(filter: $filter, update: $update) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      epoch_date_published\n      epoch_date_downloaded\n      epoch_date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n      quiet\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteOneReport($filter: ReportFilterType!) {\n    deleteOneReport(filter: $filter) {\n      report_number\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteOneReport($filter: ReportFilterType!) {\n    deleteOneReport(filter: $filter) {\n      report_number\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LinkReportsToIncidents($input: LinkReportsToIncidentsInput!) {\n    linkReportsToIncidents(input: $input) {\n      incident_id\n      reports {\n        report_number\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LinkReportsToIncidents($input: LinkReportsToIncidentsInput!) {\n    linkReportsToIncidents(input: $input) {\n      incident_id\n      reports {\n        report_number\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation logReportHistory($input: History_reportInsertInput!) {\n    logReportHistory(input: $input) {\n      report_number\n    }\n  }\n"): (typeof documents)["\n  mutation logReportHistory($input: History_reportInsertInput!) {\n    logReportHistory(input: $input) {\n      report_number\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindReportHistory($query: History_reportQueryInput) {\n    history_reports(query: $query, sortBy: EPOCH_DATE_MODIFIED_DESC) {\n      _id\n      authors\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      editor_notes\n      embedding {\n        from_text_hash\n        vector\n      }\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      flag\n      image_url\n      inputs_outputs\n      is_incident_report\n      language\n      modifiedBy\n      plain_text\n      report_number\n      submitters\n      tags\n      text\n      title\n      url\n      source_domain\n      user\n      quiet\n    }\n  }\n"): (typeof documents)["\n  query FindReportHistory($query: History_reportQueryInput) {\n    history_reports(query: $query, sortBy: EPOCH_DATE_MODIFIED_DESC) {\n      _id\n      authors\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      editor_notes\n      embedding {\n        from_text_hash\n        vector\n      }\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      flag\n      image_url\n      inputs_outputs\n      is_incident_report\n      language\n      modifiedBy\n      plain_text\n      report_number\n      submitters\n      tags\n      text\n      title\n      url\n      source_domain\n      user\n      quiet\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindReports($filter: ReportFilterType!) {\n    reports(filter: $filter) {\n      _id\n      submitters\n      date_published\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      authors\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n    }\n  }\n"): (typeof documents)["\n  query FindReports($filter: ReportFilterType!) {\n    reports(filter: $filter) {\n      _id\n      submitters\n      date_published\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      authors\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindReportsTable($filter: ReportFilterType!) {\n    reports(filter: $filter, sort: { report_number: DESC }) {\n      _id\n      submitters\n      date_published\n      date_downloaded\n      date_submitted\n      date_modified\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      authors\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n      editor_notes\n      is_incident_report\n    }\n  }\n"): (typeof documents)["\n  query FindReportsTable($filter: ReportFilterType!) {\n    reports(filter: $filter, sort: { report_number: DESC }) {\n      _id\n      submitters\n      date_published\n      date_downloaded\n      date_submitted\n      date_modified\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      authors\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n      editor_notes\n      is_incident_report\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation FlagReport($report_number: Int!, $input: Boolean!) {\n    flagReport(report_number: $report_number, input: $input) {\n      report_number\n      flag\n      date_modified\n      epoch_date_modified\n    }\n  }\n"): (typeof documents)["\n  mutation FlagReport($report_number: Int!, $input: Boolean!) {\n    flagReport(report_number: $report_number, input: $input) {\n      report_number\n      flag\n      date_modified\n      epoch_date_modified\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteSubmission($_id: ObjectId!) {\n    deleteOneSubmission(filter: { _id: { EQ: $_id } }) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSubmission($_id: ObjectId!) {\n    deleteOneSubmission(filter: { _id: { EQ: $_id } }) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindSubmissions {\n    submissions {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      plain_text\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      status\n      user {\n        userId\n      }\n      quiet\n    }\n  }\n"): (typeof documents)["\n  query FindSubmissions {\n    submissions {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      plain_text\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      status\n      user {\n        userId\n      }\n      quiet\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindSubmission($filter: SubmissionFilterType!) {\n    submission(filter: $filter) {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      status\n      quiet\n    }\n  }\n"): (typeof documents)["\n  query FindSubmission($filter: SubmissionFilterType!) {\n    submission(filter: $filter) {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n      status\n      quiet\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateSubmission($filter: SubmissionFilterType!, $update: SubmissionUpdateType!) {\n    updateOneSubmission(filter: $filter, update: $update) {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSubmission($filter: SubmissionFilterType!, $update: SubmissionUpdateType!) {\n    updateOneSubmission(filter: $filter, update: $update) {\n      _id\n      cloudinary_id\n      date_downloaded\n      date_modified\n      date_published\n      date_submitted\n      description\n      image_url\n      incident_date\n      incident_ids\n      incident_editors {\n        first_name\n        last_name\n        userId\n      }\n      incident_title\n      language\n      source_domain\n      text\n      title\n      authors\n      submitters\n      url\n      editor_notes\n      tags\n      developers {\n        entity_id\n        name\n      }\n      deployers {\n        entity_id\n        name\n      }\n      harmed_parties {\n        entity_id\n        name\n      }\n      nlp_similar_incidents {\n        similarity\n        incident_id\n      }\n      editor_similar_incidents\n      editor_dissimilar_incidents\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InsertSubmission($data: SubmissionInsertType!) {\n    insertOneSubmission(data: $data) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation InsertSubmission($data: SubmissionInsertType!) {\n    insertOneSubmission(data: $data) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PromoteSubmission($input: PromoteSubmissionToReportInput!) {\n    promoteSubmissionToReport(input: $input) {\n      incident_ids\n      report_number\n    }\n  }\n"): (typeof documents)["\n  mutation PromoteSubmission($input: PromoteSubmissionToReportInput!) {\n    promoteSubmissionToReport(input: $input) {\n      incident_ids\n      report_number\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpsertSubscription($filter: SubscriptionFilterType!, $update: SubscriptionInsertType!) {\n    upsertOneSubscription(filter: $filter, update: $update) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertSubscription($filter: SubscriptionFilterType!, $update: SubscriptionInsertType!) {\n    upsertOneSubscription(filter: $filter, update: $update) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindSubscriptions($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      userId {\n        userId\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindSubscriptions($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      userId {\n        userId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindSubscriptionsFull($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      _id\n      incident_id {\n        incident_id\n        title\n      }\n      entityId {\n        entity_id\n        name\n      }\n      type\n      userId {\n        userId\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindSubscriptionsFull($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      _id\n      incident_id {\n        incident_id\n        title\n      }\n      entityId {\n        entity_id\n        name\n      }\n      type\n      userId {\n        userId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteSubscriptions($filter: SubscriptionFilterType!) {\n    deleteManySubscriptions(filter: $filter) {\n      deletedCount\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSubscriptions($filter: SubscriptionFilterType!) {\n    deleteManySubscriptions(filter: $filter) {\n      deletedCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUserSubscriptions($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      _id\n      incident_id {\n        incident_id\n        title\n      }\n      entityId {\n        entity_id\n        name\n      }\n      userId {\n        userId\n      }\n      type\n    }\n  }\n"): (typeof documents)["\n  query FindUserSubscriptions($filter: SubscriptionFilterType!) {\n    subscriptions(filter: $filter) {\n      _id\n      incident_id {\n        incident_id\n        title\n      }\n      entityId {\n        entity_id\n        name\n      }\n      userId {\n        userId\n      }\n      type\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUsers {\n    users {\n      roles\n      userId\n      first_name\n      last_name\n    }\n  }\n"): (typeof documents)["\n  query FindUsers {\n    users {\n      roles\n      userId\n      first_name\n      last_name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUser($filter: UserFilterType!) {\n    user(filter: $filter) {\n      roles\n      userId\n      first_name\n      last_name\n      adminData {\n        email\n        disabled\n        creationDate\n        lastAuthenticationDate\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindUser($filter: UserFilterType!) {\n    user(filter: $filter) {\n      roles\n      userId\n      first_name\n      last_name\n      adminData {\n        email\n        disabled\n        creationDate\n        lastAuthenticationDate\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUsersByRole($role: [String!]) {\n    users(filter: { roles: { IN: $role } }) {\n      roles\n      userId\n      first_name\n      last_name\n    }\n  }\n"): (typeof documents)["\n  query FindUsersByRole($role: [String!]) {\n    users(filter: { roles: { IN: $role } }) {\n      roles\n      userId\n      first_name\n      last_name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserRoles($roles: [String]!, $userId: String) {\n    updateOneUser(filter: { userId: { EQ: $userId } }, update: { set: { roles: $roles } }) {\n      roles\n      userId\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserRoles($roles: [String]!, $userId: String) {\n    updateOneUser(filter: { userId: { EQ: $userId } }, update: { set: { roles: $roles } }) {\n      roles\n      userId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserProfile($userId: String, $first_name: String, $last_name: String) {\n    updateOneUser(\n      filter: { userId: { EQ: $userId } }\n      update: { set: { first_name: $first_name, last_name: $last_name } }\n    ) {\n      userId\n      first_name\n      last_name\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserProfile($userId: String, $first_name: String, $last_name: String) {\n    updateOneUser(\n      filter: { userId: { EQ: $userId } }\n      update: { set: { first_name: $first_name, last_name: $last_name } }\n    ) {\n      userId\n      first_name\n      last_name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindVariants {\n    reports(filter: { OR: [{ title: { EQ: \"\" } }, { url: { EQ: \"\" } }, { source_domain: { EQ: \"\" } }] }) {\n      submitters\n      date_published\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      plain_text\n      authors\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n    }\n  }\n"): (typeof documents)["\n  query FindVariants {\n    reports(filter: { OR: [{ title: { EQ: \"\" } }, { url: { EQ: \"\" } }, { source_domain: { EQ: \"\" } }] }) {\n      submitters\n      date_published\n      report_number\n      title\n      description\n      url\n      image_url\n      cloudinary_id\n      source_domain\n      text\n      plain_text\n      authors\n      epoch_date_downloaded\n      epoch_date_modified\n      epoch_date_published\n      epoch_date_submitted\n      language\n      tags\n      inputs_outputs\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindIncidentVariants($incident_id: Int!) {\n    incident(filter: { incident_id: { EQ: $incident_id } }) {\n      incident_id\n      reports {\n        report_number\n        title\n        text\n        url\n        source_domain\n        date_published\n        tags\n        inputs_outputs\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindIncidentVariants($incident_id: Int!) {\n    incident(filter: { incident_id: { EQ: $incident_id } }) {\n      incident_id\n      reports {\n        report_number\n        title\n        text\n        url\n        source_domain\n        date_published\n        tags\n        inputs_outputs\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindVariant($filter: ReportFilterType) {\n    report(filter: $filter) {\n      report_number\n      title\n      date_published\n      submitters\n      text\n      tags\n      inputs_outputs\n    }\n  }\n"): (typeof documents)["\n  query FindVariant($filter: ReportFilterType) {\n    report(filter: $filter) {\n      report_number\n      title\n      date_published\n      submitters\n      text\n      tags\n      inputs_outputs\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateVariant($input: CreateVariantInput!) {\n    createVariant(input: $input) {\n      incident_id\n      report_number\n    }\n  }\n"): (typeof documents)["\n  mutation CreateVariant($input: CreateVariantInput!) {\n    createVariant(input: $input) {\n      incident_id\n      report_number\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateVariant($filter: ReportFilterType!, $update: ReportUpdateType!) {\n    updateOneReport(filter: $filter, update: $update) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      epoch_date_published\n      epoch_date_downloaded\n      epoch_date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateVariant($filter: ReportFilterType!, $update: ReportUpdateType!) {\n    updateOneReport(filter: $filter, update: $update) {\n      url\n      title\n      authors\n      submitters\n      date_published\n      date_downloaded\n      date_modified\n      epoch_date_published\n      epoch_date_downloaded\n      epoch_date_modified\n      image_url\n      text\n      plain_text\n      tags\n      flag\n      report_number\n      editor_notes\n      language\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteOneVariant($filter: ReportFilterType!) {\n    deleteOneReport(filter: $filter) {\n      report_number\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteOneVariant($filter: ReportFilterType!) {\n    deleteOneReport(filter: $filter) {\n      report_number\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;