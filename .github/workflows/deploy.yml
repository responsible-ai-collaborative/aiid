name: Deploy to Netlify
on:
  workflow_call:
    inputs:
      environment:
        description: The Github environment to load secrets from
        type: string
        required: true
      netlify-context:
        description: The Netlify context use when building
        type: string
        required: true
      netlify-alias:
        description: The Netlify alias to deploy to (empty deploys to production)
        type: string
        required: true
      sha:
        description: The commit SHA to deploy
        type: string
        required: true
      runner-label:
        description: The label of the runner to use
        type: string
      cache-modifier:
        description: A modifier for the cache key used to bypass existing cache
        type: string
        required: false
        default: ""

jobs:
  netlify-deploy:
    environment: ${{ inputs.environment }}
    runs-on:
      labels: ${{ inputs.runner-label || 'ubuntu-latest' }}
    permissions:
      pull-requests: write
    steps:
      - name: Cleanup Disk Space
        run: |
          echo "Before removing files:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "After removing files:"
          df -h

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Read node modules from cache
        id: cache-nodemodules
        uses: actions/cache/restore@v4
        env:
          cache-name: cache-install-folder
        with:
          path: |
            site/gatsby-site/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ inputs.cache-modifier }}

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: site/gatsby-site

      - name: Use deploy specific netlify.toml
        run: mv deploy-netlify.toml netlify.toml
        working-directory: site/gatsby-site

      - name: Install Netlify CLI
        run: npm install netlify-cli -g

      - name: Build using Netlify
        run: netlify build --context ${{ inputs.netlify-context }} --offline
        working-directory: site/gatsby-site
        env:
          NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_PROJECT_ID: ${{ vars.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          E2E_ADMIN_USERNAME: ${{ secrets.E2E_ADMIN_USERNAME }}
          E2E_ADMIN_PASSWORD: ${{ secrets.E2E_ADMIN_PASSWORD }}
          ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}
          GATSBY_ALGOLIA_APP_ID: ${{ vars.GATSBY_ALGOLIA_APP_ID }}
          GATSBY_ALGOLIA_SEARCH_KEY: ${{ vars.GATSBY_ALGOLIA_SEARCH_KEY }}
          GATSBY_AVAILABLE_LANGUAGES: ${{ vars.GATSBY_AVAILABLE_LANGUAGES }}
          GATSBY_REALM_APP_ID: ${{ vars.GATSBY_REALM_APP_ID }}
          GOOGLE_TRANSLATE_API_KEY: ${{ secrets.GOOGLE_TRANSLATE_API_KEY }}
          MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
          MONGODB_REPLICA_SET: ${{ secrets.MONGODB_REPLICA_SET }}
          MONGODB_TRANSLATIONS_CONNECTION_STRING: ${{ secrets.MONGODB_TRANSLATIONS_CONNECTION_STRING }}
          TRANSLATE_SUBMISSION_DATE_START: ${{ vars.TRANSLATE_SUBMISSION_DATE_START }}
          MONGODB_MIGRATIONS_CONNECTION_STRING: ${{ secrets.MONGODB_MIGRATIONS_CONNECTION_STRING }}
          GATSBY_REALM_APP_GRAPHQL_URL: ${{ secrets.GATSBY_REALM_APP_GRAPHQL_URL }}
          GATSBY_PRISMIC_REPO_NAME: ${{ vars.GATSBY_PRISMIC_REPO_NAME }}
          PRISMIC_ACCESS_TOKEN: ${{ secrets.PRISMIC_ACCESS_TOKEN }}
          NODE_OPTIONS: --dns-result-order=ipv4first
          GATSBY_ROLLBAR_TOKEN: ${{ secrets.GATSBY_ROLLBAR_TOKEN }}
          SKIP_PAGE_CREATOR: ${{ vars.SKIP_PAGE_CREATOR }}
          CLOUDFLARE_R2_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_R2_ACCOUNT_ID }}
          CLOUDFLARE_R2_BUCKET_NAME: ${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
          GATSBY_CLOUDFLARE_R2_PUBLIC_BUCKET_URL: ${{ vars.GATSBY_CLOUDFLARE_R2_PUBLIC_BUCKET_URL }}
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          REALM_GRAPHQL_API_KEY: ${{ secrets.REALM_GRAPHQL_API_KEY }}
          GATSBY_COMMIT_SHA: ${{ inputs.sha }}
          TRANSLATE_DRY_RUN: ${{ vars.TRANSLATE_DRY_RUN }}
          REALM_API_APP_ID: ${{ vars.REALM_API_APP_ID }}
          REALM_API_GROUP_ID: ${{ vars.REALM_API_GROUP_ID }}
          REALM_APP_ID: ${{ vars.GATSBY_REALM_APP_ID }}
          REALM_API_PUBLIC_KEY: ${{ secrets.REALM_API_PUBLIC_KEY }}
          REALM_API_PRIVATE_KEY: ${{ secrets.REALM_API_PRIVATE_KEY }}
          ROLLBAR_POST_SERVER_ITEM_ACCESS_TOKEN: ${{ secrets.GATSBY_ROLLBAR_TOKEN }}
          API_MONGODB_CONNECTION_STRING: ${{ secrets.API_MONGODB_CONNECTION_STRING }}

      - name: Build size
        run: |
          du -ah . 2>/dev/null | sort -rh | head -n 20

      - name: Upload to netlify
        id: deploy-netlify
        working-directory: site/gatsby-site
        run: |
          set -e
          # If no alias is specified, deploy to production
          if [[ -z "${{ inputs.netlify-alias }}" ]]; then 
            OUTPUT=$(bash -c "netlify deploy --json --prod" | tr '\n' ' ')
          # Otherwise, deploy to the specified alias
          else
            OUTPUT=$(bash -c "netlify deploy --json --alias=${{ inputs.netlify-alias }}" | tr '\n' ' ')
          fi
          set +e
          NETLIFY_OUTPUT=$(echo "$OUTPUT")
          echo "deploy_log=$NETLIFY_OUTPUT" >> $GITHUB_OUTPUT
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const deployOutput = `${{ steps.deploy-netlify.outputs.deploy_log }}`;
            const deployData = JSON.parse(deployOutput);
            const comment = `ðŸš€ Deployed to Netlify!\n\nâœ… Build Log: \n${deployData.logs}\n\nðŸ”— Preview URL: ${deployData.deploy_url}`;

            const { data: pullRequests } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ inputs.sha }}'
            });

            for (const pr of pullRequests) {
              if (pr.state === 'open') {
                github.rest.issues.createComment({
                  issue_number: pr.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
                break; // Assuming you want to comment only on the first open PR
              }
            }
